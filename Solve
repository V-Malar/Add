package Week2;

import java.lang.reflect.Method;

class NewCorona {
	public String shinchan = "Shinchan";
}

class Diseases extends NewCorona {
	public String name = "infectious";
	public boolean infectious = true;
	String c = "a";
	boolean s = false;

	public String getShinchan() {
		return this.shinchan;
	}
}

class Corona extends Diseases {
	public String getName() {
		return this.name;
	}

	public boolean isInfectious() {
		return infectious;
	}

	String getC() {
		return this.c;
	}

	boolean isS() {
		return this.s;
	}
}

public class ReflectionGetterFinder {

	public static Method findGetter(Class<?> clazz, String propertyName) {
		Method getter = null;
		String capitalizedPropertyName = propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);
		String getterName = (propertyName.startsWith("is") && propertyName.length() > 2) ? propertyName
				: "get" + capitalizedPropertyName;

		try {
			getter = clazz.getDeclaredMethod(getterName);
		} catch (NoSuchMethodException e) {
			Class<?> superClass = clazz.getSuperclass();
			if (superClass != null && !superClass.equals(Object.class)) {
				getter = findGetter(superClass, propertyName);
			}
		}
		return getter;
	}

	public static void main(String[] args) throws NoSuchFieldException, SecurityException {
		// Assume we are looking for the getter of the "age" property in the Person
		// class
		String propertyName = "shinchan";

		try {
			Class<?> personClass = Class.forName("Week2.Corona");
			Method getter = findGetter(personClass, propertyName);

			if (getter != null) {
				System.out.println("Found getter method: " + getter.getName() + " "
						+ getter.getClass().getDeclaredField(propertyName).getName());
			} 
//			else if (propertyName != getter.getClass().getDeclaredField(propertyName).getName()) {
//
//			} 
			else {
				System.out.println("Getter method not found for property: " + propertyName);
			}
		} catch (ClassNotFoundException e) {
			System.out.println("Class not found.");
		}
	}
}
